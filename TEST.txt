\\LAST DUPLICATE IN ARRAY
public class LastDuplicateFinder
 {
    public static void main(String[] args) {
        int[] arr = {3, 5, 2, 4, 5, 2, 1};

        Integer lastDuplicate = null;

        for (int i = 0; i < arr.length; i++) {

            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    lastDuplicate = arr[i];
                    break; }
            }
        }

        if (lastDuplicate != null) {
            System.out.println("Last duplicate is: " + lastDuplicate);
        } else {
            System.out.println("No duplicates found.");
        }
    }
}
\\
lINKEDLIST WITH ENQUESUE DEQUEUE AND PEEK

import java.util.LinkedList;

public class Queue<T> {
    private LinkedList<T> list;


    public Queue() {
        list = new LinkedList<>();
    }

    public void enqueue(T item) {
        list.addLast(item);
    }


    public T dequeue() {
        if (isEmpty()) {
            throw new RuntimeException("Queue is empty. Cannot dequeue.");
        }
        return list.removeFirst();
    }

    public T peek() {
        if (isEmpty()) {
            throw new RuntimeException("Queue is empty. Cannot peek.");
        }
        return list.getFirst();
    }

    public boolean isEmpty() {
        return list.isEmpty();
    }


    public String toString() {
        return list.toString();
    }


    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        System.out.println("Queue after enqueue: " + queue);

        System.out.println("Peek: " + queue.peek());

        System.out.println("Dequeue: " + queue.dequeue());
        System.out.println("Queue after dequeue: " + queue);

        System.out.println("Is queue empty? " + queue.isEmpty());
    }
}


\\
TO DETECT THE CYCLE IN LINKEDLIST
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class Main {

    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) return false;

        ListNode slow = head;
        ListNode fast = head;


        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;


            if (slow == fast) {
                return true;
            }
        }


        return false;
    }


    public static void main(String[] args) {
        ListNode node1 = new ListNode(3);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(0);
        ListNode node4 = new ListNode(-4);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node2;

        Main hk = new Main();
        System.out.println("Has cycle: " + hk.hasCycle(node1));
    }
}    
CIRCULAR LINKEDLIST

class CircularLinkedList {
    private Node head = null;
    private Node tail = null;

    private class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
        }
    }


    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            tail.next = head;
        } else {
            tail.next = newNode;
            tail = newNode;
            tail.next = head;
        }
    }


    public void remove(int data) {
        if (head == null) return;

        Node current = head;
        Node previous = tail;
        boolean found = false;

        do {
            if (current.data == data) {
                found = true;
                if (current == head) {
                    head = head.next;
                    tail.next = head;
                } else if (current == tail) {
                    tail = previous;
                    tail.next = head;
                } else {
                    previous.next = current.next;
                }
                break;
            }
            previous = current;
            current = current.next;
        } while (current != head);

        if (!found) {
            System.out.println(" not found.");
        }
    }


    public boolean contains(int data) {
        if (head == null) return false;

        Node current = head;
        do {
            if (current.data == data) return true;
            current = current.next;
        } while (current != head);

        return false;
    }


    public void printList() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != head);
        System.out.println();
    }


    public static void main(String[] args) {
        CircularLinkedList list = new CircularLinkedList();

        list.add(10);
        list.add(20);
        list.add(30);
        list.printList();

        list.remove(20);
        list.printList();

        System.out.println(list.contains(10));
        System.out.println(list.contains(20));
    }
}
\\LONGESTDCCREASINGSUBSEQUENCE
public class LongestDecreasingSubsequence {

    public static int findLDS(int[] arr) {
        int n = arr.length;
        int[] dp = new int[n];


        for (int i = 0; i < n; i++) {
            dp[i] = 1;
        }


        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] < arr[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }


        int max = dp[0];
        for (int i = 1; i < n; i++) {
            if (dp[i] > max)
                max = dp[i];
        }

        return max;
    }

    public static void main(String[] args) {
        int[] arr = {9, 4, 3, 2, 5, 4, 3, 2};
        int result = findLDS(arr);
        System.out.println("Length of Longest Decreasing Subsequence: " + result);
    }
}


